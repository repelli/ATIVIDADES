Aula 19_05_2025

internet.h
-------------

#ifndef INTERNET_H
#define INTERNET_H

void conectaWiFi(void);
void checkWiFi(void);

#endif

senhas.h
-----------
const char *SSID = "SALA 09";
const char *SENHA = "info@134";

internet.cpp
------------
#include <Arduino.h>
#include <WiFi.h>
#include "internet.h"
#include "senhas.h"

const unsigned long tempoEsperaConexao = 20000;
const unsigned long tempoEsperaReconexao = 10000;

void conectaWiFi()
{
    Serial.printf("Conectando ao WiFi: %s", SSID);
    WiFi.begin(SSID, SENHA);

    unsigned long tempoInicialWiFi = millis();

    while (WiFi.status() != WL_CONNECTED && millis() - tempoInicialWiFi < tempoEsperaConexao)
    {
        Serial.print(".");
        delay(500);
    }

    if (WiFi.status() == WL_CONNECTED)
    {
        Serial.println("\nWiFi Conectado com sucesso! ");
        Serial.print("Endereço IP: ");
        Serial.println(WiFi.localIP());
    }

    else
    {
        Serial.println("\nFalha ao conectar no WiFi. Verifique o nome da rede e a senha");
    }
}

void checkWiFi()
{
    unsigned long tempoAtual = millis();
    static unsigned long tempoUltimaConexao = 0;

    if (tempoAtual - tempoUltimaConexao > tempoEsperaReconexao)
    {
        if (WiFi.status() != WL_CONNECTED)
        {
            Serial.println("\n Conexão Perdida! Tentando reconectar...");
            conectaWiFi();
        }
        tempoUltimaConexao = tempoAtual;
    }
}

main
-----

#include<Arduino.h>
#include"internet.h"
#include<PubSubClient.h>
#include<WiFi.h>

#define pinLed 2

WiFiClient espClient;
PubSubClient client(espClient);

const char *mqtt_server= "broker.hivemq.com";
const int mqtt_port = 1883;
const char  *mqtt_id = "esp32-senai134-fernando" ;
const char *mqtt_topic_sub = "senai134/mesa03/esp_inscrito";
const char *mqtt_topi_pub = "senai134/mesa03/esp_publicando";


void callback(char *,byte *, unsigned int);
void mqttConnect(void);



void setup(){
  Serial.begin(9600);
  pinMode(pinLed,OUTPUT);
  conectaWiFi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);



}


void loop()
{

  checkWiFi();
  if(!client.connected())
      mqttConnect();

  client.loop();
//funcao de tempo para não ser tão rapido.

static unsigned long tempoAnterior = 0;
unsigned long tempoAtual = millis();
if(tempoAtual - tempoAnterior > 3000)
{
  client.publish(mqtt_topi_pub,"Ola mundo");
  tempoAnterior = tempoAtual;

}

  }


//Fucao que recebe os bites e converte em mensagem.

void callback(char *topic, byte *payload, unsigned int Lenght)
{
  Serial.printf("Mensagem recebida em %s: ",topic);
  String mensagem ="";
  digitalWrite(pinLed,HIGH);


  for(unsigned int i  = 0 ; i < Lenght; i++)
  {
   char c = (char)payload[i];
  mensagem+=c;   
  }
Serial.println(mensagem);
}

//Funcao para conexão mqtt.

void mqttConnect()
{

while(!client.connected())
{
  Serial.println("Concectando ao MQTT...");
  if(client.connect(mqtt_id))
{
Serial.println("Conectado com sucesso...");
client.subscribe(mqtt_topic_sub); //Tópico que eu quero me inscrever

}
else
{
  Serial.print("Falha, rc= ");
  Serial.println(client.state());
  Serial.println("Tentando nvamemente em 5 segundos.");
  delay(5000);
}
}

}