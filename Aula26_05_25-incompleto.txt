#include<Arduino.h>
#include<DHT.h>
#include<DHT_U.h>
#include<wire.h>
#include<PubSubClient.h>
#include<WiFi.h>
#include<Arduino.Json.h>
#include"internet.h"
#include<Bounce2.h>
#include<ezTime.h>
#include<DHT.h>
#include<DHT_U.h>

#define DHTPIN 25
#define DHTTYPE 22

#define pinLed 2

DHT_Unified dht(DHTPIN,DHTTTYPE);
WiFiClient espClient;
PubSubClient client(espClient);
Bounce botão = Bounce();
Timezone tempo;

const char *mqtt_server = "broker,hivemq.com";
const inst mqtt_port 1883;
const char *mqtt_id = "esp32-senai134-fernando";
const char *mqtt_topic_sub = "senai134/mesa03/esp_inscrito";
const char *mqtt_topic_pub = "senai134/mesa03/esp_publicando";

bool estadoLed = false;
bool modoPisca = false;
bool envioMqtt = false;

unsigned long tempoEspera = 500;
unsigned long tempoEnvio;

void controleLed(void);
void callback(char *, byte *, unsigned int);
void mqttConnect(void);

void setup()
{
Serial.begin(9600);
dht.begin();
Wire.begin();
conectaWiFi();

client.serServer(mqtt_server,mqtt_port);
client.setCallback(callback);

waitForSync();
tempo.setLocation("America/Sao_Paulo");

}

void loop()
{
checkWiFi();

if(!client.connected())
  mqttConnect();
client.loop();

static unsigned long tempoAnterior = 0;
unsigned long tempoAtual = millis();
unsigned long agora = millis();

JsonDocument doc;
String mensagem;

botao.update();

float temperatura,umidade;

if(agora - tempoAnterior > tempoEnvio)
{
temperatura = dht.readTemperature();
umidade = dht.readHumidity();
tempoAnterior = agora

doc["temp"] = temperatura;
doc["umid"] = umidade;
envioMqtt = true;
tempoAnterior = agora;

}
if(botao.changed())
{
doc["botao"] = !botao.read();
envioMqtt = true;

}

if(envioMqtt)
{

serializeJson(doc,mensagem);
Serial.println(mensagem);
doc["timestamp"] = tempo.now();
client.publish(mqtt_topic_pub, mensagem.c_str());
envioMqtt = false;
}
controleLed();

do
{
hum = dht.readHumidity();
temp = dht.readTemperatura();
}while(isnam(temp) || isnam(hum));

Serial.println("Temperatura: ");
Serial.print(string(temp).c_str());
Serial.print("C");

Serial.println("Umidade: ");
Serial.print(string(hum).c_str());

delay(2000);
}
}



//FUNÇÕES

void callback(char *topic, byte *payload, unsigned int length)
{
Serial.printf("Mensagem recebida em %s: ",topic);
String mensagem ="";
for(unsigned int i = 0; i < length; i++)
{
char c = (char)payload[i];
mensagem+=c;
}
Serial.println(mensagem);

JsonDocumento doc;
deserializeJson(doc,mensagem);

if(!doc["estadoLed].isNull())
{
estadoLed = doc["estadoLed"]
modoPisca = 0;
}
if(!doc["modoPisca].isNull())
{
modoPisca = doc["modoPisca"];
}
if(!doc["velocidade"].isNull())
tempoEspera = doc["velocidade];
}
if(!doc["tempEnvio"].isNull())
{
tempoEnvio = doc["tempEnvio"];
}
}

void mqttConnect())
{
while(!client.connected())
{
Serial.println("Conectando ao MQTT);

if(client.connect(mqtt_id))
{
Serial.println("Conectado com sucesso");
client.subscribe(mqtt_topic_sub);
}
else
{
Serial.print("Falha, rc = ");
Serial.println(client.state());
Serial.println("Tentando novamente em 5 segundos");
delay(5000);
}
}
}

void controleLed()
{
while(!client.connected())
{
Serial.println("Conectando ao MQTT...");
if(client.connect(mqtt_id))
{
Serial.println("Conectado com sucesso");
client.subscribe(mqtt_topic_sub);
}
else
{
serial.print("Falha, rc = ");
Serial.println(client.state());
Serial.println("Tentando novamente em 5 segundos");
delay(5000);
}
}
}

void controleLed()
{
static unsigned long ultimaMudanca = 0;
unsigned long agora = millis();

if(modoPisca)
{
if(agora - ultimaMudanca > tempoEspera)
{
estadoLed = !estadoLed;
ultimaMudanca = agora
}
}
digitalWrite(pinLed,estadoLed);
}









//imprimir a saída do json no displya



pegar a leitura de temperatura e unidade retira o valor e manda para o display

az -900 -40 horas
ai - 900
pl - 900
dp -900
sc -900
ms -900

aws foundation partner 40

