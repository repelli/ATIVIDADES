80 horas - 8 faltas --> primeira disciplina(16).
100 horas - 0 faltas --> lógica de programação(25).
100 horas - 8 faltas --> arquitetura de redes com OIT(25).
                    --> sistemas operacionais.
------------------------------------------------------

INTERNET.H
----------
#ifndef INTERNET_H
#define INTERNET_H

void conectaWiFi(void);
void checkWiFi(void);

#endif

SENHAS.H
---------
const char *SSID = "SALA 09";
const char *SENHA = "info@134";

INTERNET.CPP
------------
#include <Arduino.h>
#include <WiFi.h>
#include "internet.h"
#include "senhas.h"

const unsigned long tempoEsperaConexao = 20000;
const unsigned long tempoEsperaReconexao = 10000;

void conectaWiFi()
{
    Serial.printf("Conectando ao WiFi: %s", SSID);
    WiFi.begin(SSID, SENHA);

    unsigned long tempoInicialWiFi = millis();

    while (WiFi.status() != WL_CONNECTED && millis() - tempoInicialWiFi < tempoEsperaConexao)
    {
        Serial.print(".");
        delay(500);
    }

    if (WiFi.status() == WL_CONNECTED)
    {
        Serial.println("\nWiFi Conectado com sucesso! ");
        Serial.print("Endereço IP: ");
        Serial.println(WiFi.localIP());
    }

    else
    {
        Serial.println("\nFalha ao conectar no WiFi. Verifique o nome da rede e a senha");
    }
}

void checkWiFi()
{
    unsigned long tempoAtual = millis();
    static unsigned long tempoUltimaConexao = 0;

    if (tempoAtual - tempoUltimaConexao > tempoEsperaReconexao)
    {
        if (WiFi.status() != WL_CONNECTED)
        {
            Serial.println("\n Conexão Perdida! Tentando reconectar...");
            conectaWiFi();
        }
        tempoUltimaConexao = tempoAtual;
    }
}



MAIN.
--------
#include <Arduino.h>
#include <PubSubClient.h>
#include <WiFi.h>
#include <ArduinoJson.h>
#include "internet.h"


#define pinLed 2 

WiFiClient espClient;
PubSubClient client(espClient);

const char *mqtt_server = "broker.hivemq.com";
const int mqtt_port = 1883;
const char *mqtt_id = "espFernando";
const char *mqtt_topic_sub = "senai134/mesa03/esp_inscrito";
const char *mqtt_topic_pub = "senai134/mesa03/esp_publicando";

bool estadoLed = false;
bool modoPisca = false;
unsigned long tempoEspera = 500;

void callBack(char *, byte *, unsigned int);
void mqttConnect(void);
void controleDoLed(void);
void checkWiFi(void);

void setup()
{
  Serial.begin(9600);
  conectaWiFi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callBack);
  pinMode(pinLed, OUTPUT);
}

void loop()
{
  checkWiFi();

  if (!client.connected())
    mqttConnect();

  client.loop();

  static unsigned long tempoAnterior = 0;
  unsigned long tempoAtual = millis();

  if (tempoAtual - tempoAnterior > 3000)
  {
    client.publish(mqtt_topic_pub, "Mensagem");
    tempoAnterior = tempoAtual;
   
  }
}


void callBack(char *topic, byte *payload, unsigned int Lenght)
{
  Serial.printf("Mensagem recebida em %s:", topic);

  String mensagem = "";
  for (unsigned int i = 0; i < Lenght; i++)
  {
    char c = (char)payload[i];
    mensagem += c;
  }
  Serial.println(mensagem);
  if(mensagem == "liga")
    digitalWrite(pinLed,HIGH);
  else 
   digitalWrite(pinLed,LOW);

  JsonDocument doc;
  deserializeJson(doc, mensagem);

  if (!doc[estadoLed].isNull())
  {
    estadoLed = doc["estadoLed"];
  }

  if (!doc[modoPisca].isNull())
  {
    modoPisca = doc["modoPisca"];
  }

  if (!doc[tempoEspera].isNull())
  {
    tempoEspera = doc["tempoEspera"];
  }
}

void mqttConnect()
{
  while (!client.connected())
  {
    Serial.println("Conectando ao MQTT...");

    if (client.connect(mqtt_id))
    {
      Serial.println("Conectado com sucesso");
      client.subscribe(mqtt_topic_sub);
    }
    else
    {
      Serial.println("Falha, rc=");
      Serial.println(client.state());
      Serial.println("Tentando novamente em 5 segundos");
      delay(5000);
    }
  }
}

void controleDoLed()
{
  static unsigned long ultimaMudanca = 0;
  unsigned long agora = millis();

  if (modoPisca == true)

  {
    if (agora - ultimaMudanca > tempoEspera)
    {
      !estadoLed;
      ultimaMudanca = agora;
    }
  }
}


------------------------------

void ligaLed()
{

if(estadoLed)
 digitalWrite(pinLed,HIGH);
else
 digitalWrite(pinLed,LOW);


}
------------------

{
"comando":"led",
"acao: "ligar",
"pino": 2
}

{
"comando":"led",
"acao: "desliga",
"pino": 2
}

-------------------------------
CORREÇÃO.
---------

{
"botao:"0",
"msg:"Ola mundo"

}














